{"version":3,"sources":["stateAPI/state.ts","stateAPI/interface.ts","stateAPI/reducer.ts","stateAPI/actions.ts","screen/Topbar.tsx","functions/api-access-point.ts","screen/Login.tsx","functions/calc-ago.ts","assets/male1.png","assets/male2.png","assets/male3.png","assets/male4.png","assets/female1.png","assets/female2.png","assets/female3.png","assets/female4.png","screen/threads/ThreadHeading.tsx","assets/gala.png","functions/loadThreadsFromServer.ts","screen/threads/Replies.tsx","screen/Threads.tsx","functions/loadUserFromServer.ts","functions/loadBannedUsersFromServer.ts","screen/Dashboard.tsx","screen/Users.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["any","contextProvider","React","createContext","actionType","RootReducer","state","action","type","test","console","log","setThreads","threads","payload","setUsers","users","setBanned","blocks","setPassword","password","setCurrentScreen","screen","banned","screenName","Topbar","useContext","dispatch","onPressNav","e","nav","stopPropagation","isActive","onClick","className","host","Access","adminlogin","reply","deleteAthred","deleteAcomment","banuser","getallthreads","getallusers","getallbanned","LoginScene","useState","username","formstate","setform","a","preventDefault","length","fetch","method","headers","body","JSON","stringify","result","json","response","err","alert","window","localStorage","setItem","_token","id","placeholder","onChange","target","value","handleSubmit","CalculateAgo","threadms","ago","Date","now","mins","Math","round","hour","day","images","male1","male2","male3","male4","female1","female2","female3","female4","ThreadHeading","props","src","creator","avatar","width","height","alt","thread","date","title","text","loadThreadsFromServer","undefined","Error","Replies","replyText","setreplyText","isSending","setSending","replies","deleteAReply","commentid","usertoken","confirm","threadid","resjson","blockAUser","userid","_id","message","handlereply","map","index","isAdmin","gala","time","Threads","intervalid","useEffect","clearTimeout","style","marginBottom","item","ThreadItem","athread","isOpen","setOpen","handleThreadClick","handleDeleteThread","newThreads","banUser","uid","loadUserFromServer","loadBannedUsersFromServer","Dashboard","repliescount","setcount","setId","load","repliesCount","forEach","element","setInterval","Users","isBlock","user","wasBlock","i","Fragment","lastreply","description","App","useReducer","Provider","currentScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a44bc95d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { User, Thread } from './interface'\r\n\r\nconst any :any = {};\r\nexport const contextProvider = React.createContext(any);\r\n\r\nexport interface StateInterface {\r\n    threads?     :Array<Thread>;\r\n    users?       :Array<User>;\r\n    blocks?      :Array<any>;\r\n    password     :string | 'none';\r\n    text         :string;\r\n    screen       : 'login' | 'threads' | 'users' | 'dashboard' | 'loading';\r\n}\r\n\r\nexport interface StateAPI {\r\n    state     :StateInterface;\r\n    dispatch  :React.Dispatch<any>;\r\n}\r\n\r\nexport function createDefaultState() :StateInterface {\r\n    return {\r\n        text: \"Hello there\",\r\n        password: 'none',\r\n        screen: 'loading',\r\n    }\r\n}\r\n","/*\r\n    Interfaces\r\n*/\r\n\r\nexport enum actionType {\r\n    test,\r\n    setPassword,\r\n    setThreads,\r\n    setUsers,\r\n    setBanned,\r\n    setCurrentScreen,\r\n}\r\n\r\nexport interface ActionInterface {\r\n    type        :actionType;\r\n    payload?    :any;\r\n    index?      :number;\r\n}\r\n\r\nexport interface Thread {\r\n    creator     :Creator;\r\n    thread      :TDescription;\r\n    replies?    :Array<TReplies>;\r\n    _id?        :string;\r\n    _token      :string;\r\n}\r\n\r\nexport interface Creator {\r\n    username    :string;\r\n    avatar      :number;\r\n    uid         :string;\r\n}\r\n\r\nexport interface TDescription {\r\n    title       :string;\r\n    text        :string;\r\n    date        :number;\r\n}\r\n\r\nexport interface TReplies {\r\n    username    :string;\r\n    avatar      :number;\r\n    time        :number;\r\n    text        :string;\r\n    userid      :string;\r\n    _token      :string;\r\n    _id?        :string;\r\n    isAdmin     :boolean;\r\n}\r\n\r\nexport interface User {\r\n    username    :string;\r\n    avatar      :number;\r\n    description :string;\r\n    isAdmin     :boolean;\r\n    lastreply   :number;\r\n    _id?        :string;\r\n    _token?     :string;\r\n}","/*\r\n*/\r\nimport { ActionInterface, actionType } from './interface';\r\nimport { StateInterface } from './state';\r\n\r\nexport default function RootReducer(state :StateInterface, action :ActionInterface) {\r\n    switch(action.type) {\r\n        case actionType.test:\r\n            console.log('State API WORKIN');\r\n            return state;\r\n        \r\n        case actionType.setThreads:\r\n            return {\r\n                ...state,\r\n                threads: action.payload\r\n            }\r\n        \r\n        case actionType.setUsers:\r\n            return {\r\n                ...state,\r\n                users: action.payload\r\n            }\r\n        \r\n        case actionType.setBanned:\r\n            return {\r\n                ...state,\r\n                blocks: action.payload\r\n            }\r\n\r\n        case actionType.setPassword:\r\n            return {\r\n                ...state,\r\n                password: action.payload\r\n            }\r\n        \r\n        case actionType.setCurrentScreen:\r\n            return {\r\n                ...state,\r\n                screen: action.payload\r\n            }\r\n\r\n        default:\r\n            console.log('Action not defined in the reducer');\r\n            return state;\r\n    }\r\n}\r\n","/*\r\n*/\r\nimport { ActionInterface, actionType } from \"./interface\";\r\nimport { Thread, User } from \"./interface\";\r\n\r\nexport function test() :ActionInterface{\r\n    return {\r\n        type: actionType.test\r\n    }\r\n}\r\n\r\nexport function setThreads(threads :Array<Thread>) :ActionInterface {\r\n    return {\r\n        type: actionType.setThreads,\r\n        payload: threads,\r\n    }\r\n}\r\n\r\nexport function setUsers(users :Array<User>):ActionInterface {\r\n    return {\r\n        type: actionType.setUsers,\r\n        payload: users\r\n    }\r\n}\r\n\r\nexport function setBanned(banned :Array<string>) :ActionInterface {\r\n    return {\r\n        type: actionType.setBanned,\r\n        payload: banned\r\n    }\r\n}\r\n\r\nexport function setPassword(password :string) :ActionInterface {\r\n    return {\r\n        type: actionType.setPassword,\r\n        payload: password\r\n    }\r\n}\r\n\r\nexport function setCurrentScreen(screenName :string) :ActionInterface {\r\n    return {\r\n        type: actionType.setCurrentScreen,\r\n        payload: screenName\r\n    }\r\n}\r\n","/*\r\n    * TYPE\r\n        Fragment of src/App.tsx- A fragment is a piece of component that is\r\n            part of a scene\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport React from 'react';\r\nimport './styles/header.css';\r\n\r\nimport { contextProvider } from '../stateAPI/state';\r\nimport { StateAPI } from '../stateAPI/state';\r\nimport { setCurrentScreen } from '../stateAPI/actions';\r\n\r\nexport default function Topbar() {\r\n    const { state, dispatch } :StateAPI = React.useContext(contextProvider);\r\n\r\n    function onPressNav(e :any, nav :string) {\r\n        e.stopPropagation();\r\n        dispatch( setCurrentScreen(nav) );\r\n    }\r\n\r\n    function isActive(nav :string) :string | undefined {\r\n        if(state.screen === nav)\r\n            return 'active-nav';\r\n        return undefined;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <h1> Forum Moderator </h1>\r\n            </header>\r\n            {\r\n                state.screen !== 'login' &&\r\n                <nav>\r\n                    <ul>\r\n                        <span>[</span>\r\n                        <li onClick={e => onPressNav(e, 'dashboard')}   className={isActive('dashboard')}>\r\n                            Dashboard</li>\r\n                        <span>/</span>\r\n                        <li onClick={e => onPressNav(e, 'threads')}     className={isActive('threads')}>\r\n                            Threads</li>\r\n                        <span>/</span>\r\n                        <li onClick={e => onPressNav(e, 'users')}       className={isActive('users')}>\r\n                            Users</li>\r\n                        <span>]</span>\r\n                    </ul>\r\n                </nav>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","/*\r\n    Define the access API\r\n*/\r\n\r\nconst host = 'https://galavtg.herokuapp.com/api/';\r\n//const host = 'http://localhost:3200/api/';\r\n\r\nconst Access = {\r\n    adminlogin:     `${host}thread/admin/login/`,\r\n    reply:          `${host}thread/admin/reply`,\r\n    deleteAthred:   `${host}thread/admin/removeThread`,\r\n    deleteAcomment: `${host}thread/deletereply`,\r\n    banuser:        `${host}admin/banUser`,\r\n\r\n    getallthreads:  `${host}thread/admin/getAllThread`,\r\n    getallusers:    `${host}admin/getalluser`,\r\n    getallbanned:   `${host}admin/getAllBannedUser`,\r\n}\r\nexport default Access;\r\n","/*\r\n    * TYPE\r\n        Scene - A screen is a component that occupies a large part of the screen\r\n\r\n    * DESCRIPTION\r\n\r\n    * VISIBLE WHEN\r\n*/\r\nimport React from 'react';\r\nimport './styles/login.css';\r\n\r\nimport { contextProvider, StateAPI } from '../stateAPI/state';\r\nimport { setPassword, setCurrentScreen } from '../stateAPI/actions';\r\nimport Access from '../functions/api-access-point';\r\n\r\nexport default function LoginScene() {\r\n    const { dispatch } :StateAPI = React.useContext(contextProvider);\r\n    const [formstate, setform] = React.useState({username: \"\", password: \"\"})\r\n\r\n    async function handleSubmit( e :any) {\r\n        e.preventDefault();\r\n        if(formstate.username.length <= 1 || formstate.password.length <= 1)\r\n            return;\r\n        const result = await fetch(Access.adminlogin, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                username: formstate.username,\r\n                password: formstate.password\r\n        })});\r\n        const response = await result.json();\r\n        if( !response.err ) {\r\n            window.localStorage.setItem('usertoken', response._token );\r\n            dispatch( setPassword(response._token));\r\n            dispatch( setCurrentScreen('dashboard'));\r\n        }\r\n        else\r\n            alert(\"Error: \" + response.err);\r\n    }\r\n\r\n    return (\r\n        <div id=\"form\">\r\n            <h2>Log In</h2>\r\n            <label >Username</label>\r\n            <input type=\"text\" placeholder=\"username\"\r\n                onChange={ e => setform({...formstate, username: e.target.value})}/>\r\n\r\n            <label>password</label>\r\n            <input type=\"password\" placeholder=\"password\"\r\n                onChange={ e => setform({...formstate, password: e.target.value})}/>\r\n            <input className='submit' type=\"submit\" value=\"Login\" onClick={(e) => handleSubmit(e)} />\r\n        </div>\r\n    )\r\n}\r\n","/*\r\n    Calculate the time passed\r\n*/\r\n\r\nexport default function CalculateAgo(threadms :number) :string {\r\n    const ago = Date.now() - threadms;\r\n//check if less than a hour\r\n    if(ago <= (59*60*1000)) {\r\n        let mins = Math.round(ago / (60*1000));\r\n        if(mins <= 1)\r\n            return mins + ' min ago';\r\n        else return mins + ' mins ago';\r\n    }\r\n//check if less than a day\r\n    else if(ago <= (23*60*60*1000)) {\r\n        let hour = Math.round(ago / (60*60*1000));\r\n        if(hour <= 1)\r\n            return hour + ' hour ago';\r\n        else return hour + ' hours ago';\r\n    }\r\n    const day = Math.round(ago / (24*60*60*1000));\r\n    if(day === 1)\r\n        return day + ' day ago';\r\n    if(day >= 30 )\r\n        return 'long time ago';\r\n    return day + ' days ago';\r\n}\r\n","export default __webpack_public_path__ + \"static/media/male1.dece8157.png\";","export default __webpack_public_path__ + \"static/media/male2.0fb790b9.png\";","export default __webpack_public_path__ + \"static/media/male3.448007ee.png\";","export default __webpack_public_path__ + \"static/media/male4.730de75b.png\";","export default __webpack_public_path__ + \"static/media/female1.85a02bd8.png\";","export default __webpack_public_path__ + \"static/media/female2.71b2d9ae.png\";","export default __webpack_public_path__ + \"static/media/female3.c5486fee.png\";","export default __webpack_public_path__ + \"static/media/female4.4b6a858f.png\";","/*\r\n    * TYPE\r\n        Fragment of src/components/Threads.tsx- A fragment is a piece of component that is\r\n            part of a scene\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport { Creator, TDescription } from '../../stateAPI/interface';\r\nimport CalculateAgo from '../../functions/calc-ago';\r\nimport '../styles/threads.css';\r\n\r\nimport male1 from '../../assets/male1.png';\r\nimport male2 from '../../assets/male2.png';\r\nimport male3 from '../../assets/male3.png';\r\nimport male4 from '../../assets/male4.png';\r\nimport female1 from '../../assets/female1.png';\r\nimport female2 from '../../assets/female2.png';\r\nimport female3 from '../../assets/female3.png';\r\nimport female4 from '../../assets/female4.png';\r\n\r\nconst images = [\r\n    male1, male2, male3, male4, female1, female2, female3, female4\r\n];\r\n\r\ninterface propsReceive {\r\n    creator :Creator;\r\n    thread  :TDescription;\r\n}\r\n\r\nexport default function ThreadHeading(props :propsReceive) {\r\n\r\n    return (\r\n    <div>\r\n        <div className=\"thread-heading\">\r\n            <img src={images[props.creator.avatar]} width=\"50\" height=\"50\" alt=\"avatar icon\" />\r\n            <div className=\"creatorContainer\">\r\n                <div className=\"creator\">\r\n                    <div className=\"creator-name\">{props.creator.username}</div>\r\n                    <div className=\"thread-date\"> { CalculateAgo(props.thread.date) } </div>\r\n                </div>\r\n                <div className=\"thread-title\">{props.thread.title}</div>\r\n            </div>   \r\n        </div>\r\n        <div className=\"thread-description\">{props.thread.text}</div>\r\n    </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/gala.7bfe8315.png\";","/*\r\n*/\r\nimport Access from \"./api-access-point\";\r\n\r\nexport default async function loadThreadsFromServer(password :string | undefined) :Promise<any>{\r\n    if(password === undefined)\r\n        return { err: 'password was not defined' };\r\n        \r\n    const response = await fetch( Access.getallthreads, {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password: password })\r\n    });\r\n    const json = await response.json();\r\n    if(!json) throw new Error();\r\n    if(json.err) throw new Error(json.err);\r\n    return json;\r\n}\r\n","/*\r\n    * TYPE\r\n        Fragment of src/components/Threads.tsx- A fragment is a piece of component that is\r\n            part of a scene\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport React from 'react';\r\nimport '../styles/replies.css';\r\nimport '../styles/threads.css';\r\nimport { TReplies } from '../../stateAPI/interface';\r\nimport CalculateAgo from '../../functions/calc-ago';\r\n\r\nimport male1 from '../../assets/male1.png';\r\nimport male2 from '../../assets/male2.png';\r\nimport male3 from '../../assets/male3.png';\r\nimport male4 from '../../assets/male4.png';\r\nimport female1 from '../../assets/female1.png';\r\nimport female2 from '../../assets/female2.png';\r\nimport female3 from '../../assets/female3.png';\r\nimport female4 from '../../assets/female4.png';\r\nimport gala    from '../../assets/gala.png';\r\n\r\nimport { contextProvider, StateAPI } from '../../stateAPI/state';\r\nimport { setThreads } from '../../stateAPI/actions';\r\n\r\nimport loadThreadsFromServer from '../../functions/loadThreadsFromServer';\r\nimport Access from '../../functions/api-access-point';\r\n\r\nconst images = [\r\n    male1, male2, male3, male4, female1, female2, female3, female4\r\n];\r\n\r\ninterface propsReceive {\r\n    replies :Array<TReplies> | undefined;\r\n    threadid :string | undefined;\r\n}\r\n\r\nexport default function Replies(props :propsReceive)  {\r\n    const { state, dispatch } :StateAPI = React.useContext(contextProvider);\r\n    const [replyText, setreplyText] = React.useState('');\r\n    const [isSending, setSending] = React.useState(false);\r\n\r\n    if(props.replies === undefined) return <div>empty</div>\r\n\r\n    const deleteAReply = async (e :any, commentid :any, usertoken :any) => {\r\n        e.stopPropagation();\r\n        if(!window.confirm('Delete the reply?')) return;\r\n        setSending(true);\r\n        try {\r\n            const response = await fetch(Access.deleteAcomment, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    _token: usertoken,\r\n                    threadid: props.threadid,\r\n                    commentid: commentid })\r\n            });\r\n            const resjson = await response.json();\r\n            if(resjson.err) throw new Error(resjson.err);\r\n\r\n            const result = await loadThreadsFromServer(state.password);\r\n            dispatch( setThreads(result) );\r\n            setSending(false);\r\n        }\r\n        catch(err) {\r\n            alert('Cannot delete a reply\\n' + err);\r\n            setSending(false);\r\n        }\r\n    }\r\n\r\n    const blockAUser = async (e :any, userid :any) => {\r\n        e.stopPropagation();  e.preventDefault(); \r\n        if(!window.confirm('Ban or Unban the user?')) return;\r\n        setSending(true);\r\n        try {\r\n            const response = await fetch(Access.banuser, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, _id: userid })\r\n            });\r\n            const json = await response.json();\r\n            if(json.message) alert(json.message);\r\n            else alert('The user was banned');\r\n            setSending(false);\r\n        }\r\n        catch(err) {\r\n            alert('Cant ban a user.\\n' + err);\r\n            setSending(false);\r\n        }\r\n    }\r\n\r\n    const handlereply = async (e :any) => {\r\n        e.preventDefault(); e.stopPropagation(); setSending(true);\r\n        try {\r\n            const response = await fetch(Access.reply, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, threadid: props.threadid, text: replyText })\r\n            });\r\n            const json = await response.json();\r\n            if(json.err) alert('Cant make reply. ' + json.err );\r\n\r\n            setreplyText('');\r\n            const result = await loadThreadsFromServer(state.password);\r\n            dispatch( setThreads(result) );\r\n            setSending(false);\r\n        }\r\n        catch(err) {\r\n            alert('Cant ban a user.\\n' + err);\r\n            setSending(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.replies.map((reply :TReplies, index :number) => {\r\n                return (\r\n                    <div key={index} id=\"replies-container\">\r\n                    <div className=\"thread-heading\">\r\n                        { reply.isAdmin ?\r\n                            <img src={gala} width=\"50\" height=\"50\" alt=\"avatar icon\" /> :\r\n                            <img src={images[reply.avatar]} width=\"50\" height=\"50\" alt=\"avatar icon\" />\r\n                        }\r\n                        <div className=\"creatorContainer\">\r\n                            <div className=\"creator\">\r\n                                <div className=\"creator-name\">{reply.username}</div>\r\n                                <div className=\"thread-date\"> { CalculateAgo(reply.time) } </div>\r\n                            </div>\r\n                            <div className=\"thread-description\">{reply.text}</div>\r\n                        </div>   \r\n                    </div>\r\n                    \r\n                    <div className=\"thread-options-container\">\r\n                        <div onClick={ e => !isSending && deleteAReply(e, reply._id, reply._token)}>Delete</div>\r\n                        <div onClick={ e => !isSending && blockAUser(e, reply.userid )}>Block</div>\r\n                    </div>\r\n                    </div>\r\n                )})\r\n            }\r\n            <div id=\"text-reply\">\r\n                <input placeholder=\"Reply\" value={replyText} onChange={ e => setreplyText(e.target.value) }/>\r\n                <button onClick={ e => !isSending && handlereply(e)}> Send </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","/*\r\n    * TYPE\r\n        Scene - A screen is a component that occupies a large part of the screen\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport React from 'react';\r\nimport './styles/threads.css';\r\n\r\nimport { contextProvider, StateAPI } from '../stateAPI/state';\r\nimport { Thread } from '../stateAPI/interface';\r\nimport { setThreads } from '../stateAPI/actions';\r\n\r\nimport Access from '../functions/api-access-point';\r\nimport ThreadHeading from './threads/ThreadHeading';\r\nimport Replies from './threads/Replies';\r\n\r\nimport loadThreadsFromServer from '../functions/loadThreadsFromServer';\r\n\r\nexport default function Threads() {\r\n    const { state, dispatch } :StateAPI = React.useContext(contextProvider);\r\n    const [intervalid, setId] = React.useState(null);\r\n    React.useEffect(() => {\r\n        const load = async () => {\r\n            try {\r\n                const result = await loadThreadsFromServer(state.password);\r\n                dispatch( setThreads(result) );\r\n                //@ts-ignore\r\n                // eslint-disable-next-line\r\n                intervalid === null && setId( setInterval(() => load(), 10000));\r\n            }\r\n            catch(err) {\r\n                alert('Failed to load threads from the server. ' + err );\r\n            }\r\n        }\r\n        //@ts-ignore\r\n        return () => clearTimeout(intervalid);\r\n    // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{marginBottom: '6rem'}}>\r\n            {\r\n                state.threads ?\r\n                state.threads.map((item :Thread, index :number) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <ThreadItem athread={item} />\r\n                        </div>\r\n                    )\r\n                })\r\n                :\r\n                <div className=\"loading\"> ... Loading threads or threads are just empty ... </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface threadItemInterface {\r\n    athread :Thread;\r\n}\r\nfunction ThreadItem({ athread } :threadItemInterface) {\r\n    const { state, dispatch} :StateAPI = React.useContext(contextProvider);\r\n    const [isOpen, setOpen] = React.useState(false);\r\n    const [isSending, setSending] = React.useState(false);\r\n\r\n    const handleThreadClick = (e :any) => {\r\n        e.stopPropagation();\r\n        setOpen( !isOpen );\r\n    }\r\n\r\n    const handleDeleteThread = async (e :any) => {\r\n        if(!window.confirm('Delete the thread?')) return;\r\n        e.stopPropagation(); setSending(true);\r\n        try {\r\n            const response = fetch(Access.deleteAthred, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, threadid: athread._id })\r\n            });\r\n            const resjson = await (await response).json();\r\n            if(resjson.err) throw new Error(resjson.err);\r\n            const newThreads = await loadThreadsFromServer(state.password);\r\n            dispatch( setThreads(newThreads) );\r\n            setSending(false);\r\n        }\r\n        catch(err) {\r\n            alert('Cant delete.\\n' + err);\r\n        }\r\n    }\r\n    \r\n    const banUser = async (e :any) => {\r\n        if(!window.confirm('Ban or Unban the user?')) return;\r\n        e.stopPropagation(); setSending(true);\r\n        try {\r\n            const response = await fetch(Access.banuser, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, _id: athread.creator.uid })\r\n            });\r\n            const json = await response.json();\r\n            if(json.message) alert('The user was unbannded!');\r\n            else if(json.err) throw new Error(json.err);\r\n            else alert('The user was banned');\r\n            setSending(false);\r\n        }\r\n        catch(err) {\r\n            alert('Cant ban a user.\\n' + err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"threaditem\">\r\n            <ThreadHeading\r\n                creator={ athread.creator }\r\n                thread={athread.thread}\r\n            />\r\n            \r\n            <div className=\"thread-options-container\">\r\n                <div onClick={(e) => !isSending && handleDeleteThread(e)}>Delete</div>\r\n                {\r\n                    isOpen ?\r\n                        <div onClick={handleThreadClick}>{'>>Close<<'}</div>\r\n                    :\r\n                        <div onClick={handleThreadClick}>Open</div>\r\n                }\r\n                <div onClick={(e) => !isSending && banUser(e)}>Block</div>\r\n            </div>\r\n            \r\n            {\r\n                isOpen && <Replies replies={athread.replies} threadid={athread._id} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","/*\r\n*/\r\nimport Access from \"./api-access-point\";\r\n\r\nexport default async function loadUserFromServer(password :string | undefined) :Promise<any>{\r\n    if(password === undefined)\r\n        return { err: 'password was not defined' };\r\n        \r\n    const response = await fetch( Access.getallusers, {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password: password })\r\n    });\r\n    const json = await response.json();\r\n    if(!json) throw new Error();\r\n    if(json.err) throw new Error(json.err);\r\n    return json;\r\n}","/*\r\n*/\r\nimport Access from \"./api-access-point\";\r\n\r\nexport default async function loadBannedUsersFromServer(password :string | undefined) :Promise<any>{\r\n    if(password === undefined)\r\n        return { err: 'password was not defined' };\r\n        \r\n    const response = await fetch( Access.getallbanned, {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password: password })\r\n    });\r\n    const json = await response.json();\r\n    if(!json) throw new Error();\r\n    if(json.err) throw new Error(json.err);\r\n    return json;\r\n}","/*\r\n    * TYPE\r\n        Scene - A screen is a component that occupies a large part of the screen\r\n\r\n    * DESCRIPTION\r\n\r\n    * VISIBLE WHEN\r\n*/\r\nimport React from 'react';\r\nimport './styles/dashboard.css';\r\n\r\nimport { contextProvider, StateAPI } from '../stateAPI/state';\r\nimport { Thread } from '../stateAPI/interface';\r\nimport { setThreads, setUsers, setBanned } from '../stateAPI/actions';\r\n\r\nimport loadThreadsFromServer from '../functions/loadThreadsFromServer';\r\nimport loadUserFromServer from '../functions/loadUserFromServer';\r\nimport loadBannedUsersFromServer from '../functions/loadBannedUsersFromServer';\r\n\r\nexport default function Dashboard() {\r\n    const { state, dispatch } :StateAPI = React.useContext(contextProvider);\r\n    const [repliescount, setcount] = React.useState(0);\r\n    const [intervalid, setId] = React.useState({});\r\n\r\n    React.useEffect(() => {\r\n        const load = async () => {\r\n            try {\r\n                const threads = await loadThreadsFromServer(state.password);\r\n                const users = await loadUserFromServer(state.password);\r\n                const banned = await loadBannedUsersFromServer(state.password);\r\n                dispatch( setThreads(threads) );\r\n                dispatch( setUsers(users) );\r\n                dispatch( setBanned(banned) );\r\n\r\n                let repliesCount = 0;\r\n                threads.forEach((element :Thread) => {\r\n                    if(element.replies)\r\n                        repliesCount += element.replies.length;\r\n                });\r\n                setcount(repliesCount);\r\n                //@ts-ignore\r\n                intervalid === null && setId( setInterval(() => load(), 10000));\r\n            }\r\n            catch(err) {\r\n                alert('Failed to load from the server. ' + err );\r\n            }\r\n        }\r\n        load();\r\n        //@ts-ignore\r\n        return () => clearTimeout(intervalid);\r\n    // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        <div id='dashboard'>\r\n            <h3>Server Statistics</h3>\r\n            <div className=\"statistics\">\r\n                <div>Threads count: </div>\r\n                <div>\r\n                    { state.threads && state.threads.length }\r\n                </div>\r\n                <div>Total replies: </div> <div>{ repliescount }</div>\r\n\r\n                <div>\r\n                    Users count:\r\n                </div>\r\n                <div>\r\n                    { state.users && state.users.length }\r\n                </div>\r\n\r\n                <div>\r\n                    Blocked users count:\r\n                </div>\r\n                <div>\r\n                    { state.blocks && state.blocks.length }\r\n                </div>\r\n\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","/*\r\n    * TYPE\r\n        Scene - A screen is a component that occupies a large part of the screen\r\n\r\n    * DESCRIPTION\r\n\r\n    * VISIBLE WHEN\r\n*/\r\nimport React from 'react';\r\nimport './styles/replies.css';\r\nimport './styles/threads.css';\r\nimport './styles/user.css';\r\n\r\nimport { contextProvider, StateAPI } from '../stateAPI/state';\r\nimport { User } from '../stateAPI/interface';\r\nimport { setBanned } from '../stateAPI/actions';\r\n\r\nimport loadBannedUsersFromServer from '../functions/loadBannedUsersFromServer';\r\nimport CalculateAgo from '../functions/calc-ago';\r\n\r\nimport Access from '../functions/api-access-point';\r\n\r\nimport male1 from '../assets/male1.png';\r\nimport male2 from '../assets/male2.png';\r\nimport male3 from '../assets/male3.png';\r\nimport male4 from '../assets/male4.png';\r\nimport female1 from '../assets/female1.png';\r\nimport female2 from '../assets/female2.png';\r\nimport female3 from '../assets/female3.png';\r\nimport female4 from '../assets/female4.png';\r\nconst images = [\r\n    male1, male2, male3, male4, female1, female2, female3, female4\r\n];\r\n\r\nexport default function Users() {\r\n    const { state, dispatch } :StateAPI = React.useContext(contextProvider);\r\n    const [isSending, setSending] = React.useState(false);\r\n\r\n    const blockAUser = async (e :any, userid :any) => {\r\n        e.stopPropagation();  e.preventDefault(); \r\n        if(!window.confirm('Ban or Unban the user?')) return;\r\n        setSending(true);\r\n        try {\r\n            await fetch(Access.banuser, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, _id: userid })\r\n            });\r\n            const users = await loadBannedUsersFromServer(state.password);\r\n            dispatch( setBanned(users) );\r\n            setSending(false);\r\n        }\r\n        catch(err) {\r\n            alert('Cant ban a user.\\n' + err);\r\n            setSending(false);\r\n        }\r\n    }\r\n\r\n    function isBlock(user :User) {\r\n        let wasBlock = false;\r\n        if( state.blocks )\r\n            for(let i =0; i < state.blocks.length; i++) {\r\n                if(user._id === state.blocks[i].userid)\r\n                    wasBlock = true;\r\n            }\r\n        if(wasBlock)\r\n            return <div onClick={ e => !isSending && blockAUser(e, user._id)}>Unblock</div>\r\n        return <div onClick={ e => !isSending && blockAUser(e, user._id)}>Block</div>\r\n    }\r\n\r\n    return (\r\n       <React.Fragment>\r\n        {\r\n        state.users && state.users.map((user :User, index :number) => {\r\n        return (\r\n            <div key={index} id=\"user-container\">\r\n                <div className=\"heading\">\r\n                    <img src={images[user.avatar]} width=\"50\" height=\"50\" alt=\"avatar icon\" />\r\n                    <div className=\"creatorContainer\">\r\n                        <div className=\"creator\">\r\n                            <div className=\"creator-name\">{user.username}</div>\r\n                            <div className=\"thread-date\">Last reply: { CalculateAgo(user.lastreply) } </div>\r\n                        </div>\r\n                        <div className=\"thread-description\">{user.description}</div>\r\n                        <div className=\"user-options-container\">\r\n                            { isBlock(user) }\r\n                        </div>\r\n                    </div>   \r\n                </div>\r\n            </div>\r\n        )\r\n        })\r\n        }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n/*\r\n<div>\r\n            <div>Username : {user.username}</div>\r\n            <img src={images[user.avatar]} width=\"50\" height=\"50\" alt=\"avatar icon\" />\r\n                        \r\n        </div>\r\n        */","/*\n    The main app. The app has only one screen so other are just components (a fragment)\n    of the main app.\n*/\nimport React from 'react';\nimport './App.css';\n\n//set up the api context\nimport { contextProvider, createDefaultState } from './stateAPI/state';\nimport RootReducer from './stateAPI/reducer';\nimport { setPassword, setCurrentScreen } from './stateAPI/actions';\n\nimport Topbar from    './screen/Topbar';\nimport LoginScene from './screen/Login';\nimport Threads from   './screen/Threads';\nimport Dashboard from './screen/Dashboard';\nimport Users from './screen/Users';\n\n\nfunction App() {\n    const [state, dispatch] = React.useReducer(RootReducer, createDefaultState());\n    \n    React.useEffect(() => {\n      /*\n      const usertoken = window.localStorage.getItem('usertoken');\n      if( usertoken && usertoken !== null ) {\n        dispatch( setPassword(usertoken) );\n        dispatch( setCurrentScreen('dashboard') );\n      }\n      else\n      */\n        dispatch( setCurrentScreen('login') );\n    }, []);\n\n    function currentScreen() {\n      switch (state.screen) {\n        case 'loading':\n          return <div>Wait loading</div>\n        case 'login':\n          return <LoginScene />\n        case 'threads':\n          return <Threads />\n        case 'users':\n          return <Users />\n        default:\n          return <Dashboard />\n      }\n    }\n    \n    return (\n      <contextProvider.Provider value={{state, dispatch}} >\n        <Topbar />\n        { currentScreen() }\n      </contextProvider.Provider>\n    );\n}\nexport default App;\n\n/*\n{\n          state.password === 'none' ?\n            <LoginScene />\n            :\n            <React.Fragment>\n              <Threads />\n              <div id=\"refresh\" onClick={load}> Refresh </div>\n            </React.Fragment>\n        }*\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}