{"version":3,"sources":["stateAPI/state.ts","stateAPI/interface.ts","stateAPI/reducer.ts","stateAPI/actions.ts","components/Header.tsx","functions/api-access-point.ts","functions/calc-ago.ts","assets/male1.png","assets/male2.png","assets/male3.png","assets/male4.png","assets/female1.png","assets/female2.png","assets/female3.png","assets/female4.png","components/ThreadHeading.tsx","functions/loadThreadsFromServer.ts","components/Replies.tsx","components/Threads.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["any","contextProvider","React","createContext","actionType","RootReducer","state","action","type","test","console","log","setThreads","threads","payload","setPassword","password","Header","dispatch","useContext","handlePasswordChange","length","placeholder","onChange","event","target","value","host","Access","getallthreads","deleteAthred","deleteAcomment","banuser","CalculateAgo","threadms","ago","Date","now","mins","Math","round","hour","day","images","male1","male2","male3","male4","female1","female2","female3","female4","ThreadHeading","props","className","src","creator","avatar","width","height","alt","username","thread","date","title","text","loadThreadsFromServer","a","undefined","err","fetch","method","headers","body","JSON","stringify","response","json","Error","Replies","replies","deleteAReply","e","commentid","usertoken","stopPropagation","_token","threadid","resjson","result","alert","blockAUser","userid","_id","message","map","reply","index","style","marginLeft","marginTop","border","borderRadius","padding","time","onClick","Threads","Fragment","item","ThreadItem","athread","useState","isOpen","setOpen","handleThreadClick","handleDeleteThread","newThreads","banUser","uid","App","useReducer","load","Provider","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52f844d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { User, Thread } from './interface'\r\n\r\nconst any :any = {};\r\nexport const contextProvider = React.createContext(any);\r\n\r\nexport interface StateInterface {\r\n    threads?     :Array<Thread>;\r\n    users?       :Array<User>;\r\n    password?    :string;\r\n    text         :string;\r\n}\r\n\r\nexport interface StateAPI {\r\n    state     :StateInterface;\r\n    dispatch  :React.Dispatch<any>;\r\n}\r\n\r\nexport function createDefaultState() :StateInterface {\r\n    return {\r\n        text: \"Hello there\",\r\n        password: '?',\r\n    }\r\n}\r\n","/*\r\n    Interfaces\r\n*/\r\n\r\nexport enum actionType {\r\n    test,\r\n    setPassword,\r\n    setThreads,\r\n}\r\n\r\nexport interface ActionInterface {\r\n    type        :actionType;\r\n    payload?    :any;\r\n    index?      :number;\r\n}\r\n\r\nexport interface Thread {\r\n    creator     :Creator;\r\n    thread      :TDescription;\r\n    replies?    :Array<TReplies>;\r\n    _id?        :string;\r\n    _token      :string;\r\n}\r\n\r\nexport interface Creator {\r\n    username    :string;\r\n    avatar      :number;\r\n    uid         :string;\r\n}\r\n\r\nexport interface TDescription {\r\n    title       :string;\r\n    text        :string;\r\n    date        :number;\r\n}\r\n\r\nexport interface TReplies {\r\n    username    :string;\r\n    avatar      :number;\r\n    time        :number;\r\n    text        :string;\r\n    userid      :string;\r\n    _token      :string;\r\n    _id?        :string;\r\n}\r\n\r\nexport interface User {\r\n    username    :string;\r\n    avatar      :number;\r\n    description :string;\r\n    _id?        :string;\r\n    _token?     :string;\r\n}","/*\r\n*/\r\nimport { ActionInterface, actionType } from './interface';\r\nimport { StateInterface } from './state';\r\n\r\nexport default function RootReducer(state :StateInterface, action :ActionInterface) {\r\n    switch(action.type) {\r\n        case actionType.test:\r\n            console.log('State API WORKIN');\r\n            return state;\r\n        \r\n        case actionType.setThreads:\r\n            return {\r\n                ...state,\r\n                threads: action.payload\r\n            }\r\n\r\n        case actionType.setPassword:\r\n            return {\r\n                ...state,\r\n                password: action.payload\r\n            }\r\n\r\n        default:\r\n            console.log('Action not defined in the reducer');\r\n            return state;\r\n    }\r\n}\r\n","/*\r\n*/\r\nimport { ActionInterface, actionType } from \"./interface\";\r\nimport { Thread } from \"./interface\";\r\n\r\nexport function test() :ActionInterface{\r\n    return {\r\n        type: actionType.test\r\n    }\r\n}\r\n\r\nexport function setThreads(threads :Array<Thread>) :ActionInterface {\r\n    return {\r\n        type: actionType.setThreads,\r\n        payload: threads,\r\n    }\r\n}\r\n\r\nexport function setPassword(password :string) :ActionInterface {\r\n    return {\r\n        type: actionType.setPassword,\r\n        payload: password\r\n    }\r\n}\r\n","/*\r\n    * TYPE\r\n        Fragment of src/App.tsx- A fragment is a piece of component that is\r\n            part of a scene\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport React from 'react';\r\nimport './styles/header.css';\r\n\r\nimport { contextProvider, StateAPI } from '../stateAPI/state';\r\nimport { setPassword } from '../stateAPI/actions';\r\n\r\nexport default function Header() {\r\n    const { dispatch } :StateAPI = React.useContext(contextProvider);\r\n\r\n    function handlePasswordChange( password :string ) {\r\n        if( password.length > 8 )\r\n            dispatch( setPassword(password) );\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <h1> Forum Admin </h1>\r\n            <input type=\"password\" placeholder=\"secret key token\"\r\n                onChange={(event) => handlePasswordChange(event.target.value) }\r\n            />\r\n        </header>\r\n    )\r\n}\r\n","/*\r\n    Define the access API\r\n*/\r\n\r\nconst host = 'https://galavtg.herokuapp.com/api/';\r\n\r\nconst Access = {\r\n    getallthreads:  `${host}thread/admin/getAllThread`,\r\n    deleteAthred:   `${host}thread/admin/removeThread`,\r\n    deleteAcomment: `${host}thread/deletereply`,\r\n    banuser:        `${host}admin/banUser`,\r\n}\r\nexport default Access;","/*\r\n    Calculate the time passed\r\n*/\r\n\r\nexport default function CalculateAgo(threadms :number) :string {\r\n    const ago = Date.now() - threadms;\r\n//check if less than a hour\r\n    if(ago <= (59*60*1000)) {\r\n        let mins = Math.round(ago / (60*1000));\r\n        if(mins <= 1)\r\n            return mins + ' min ago';\r\n        else return mins + ' mins ago';\r\n    }\r\n//check if less than a day\r\n    else if(ago <= (23*60*60*1000)) {\r\n        let hour = Math.round(ago / (60*60*1000));\r\n        if(hour <= 1)\r\n            return hour + ' hour ago';\r\n        else return hour + ' hours ago';\r\n    }\r\n    const day = Math.round(ago / (24*60*60*1000));\r\n    if(day === 1)\r\n        return day + ' day ago';\r\n    return day + ' days ago';\r\n}\r\n","export default __webpack_public_path__ + \"static/media/male1.dece8157.png\";","export default __webpack_public_path__ + \"static/media/male2.0fb790b9.png\";","export default __webpack_public_path__ + \"static/media/male3.448007ee.png\";","export default __webpack_public_path__ + \"static/media/male4.730de75b.png\";","export default __webpack_public_path__ + \"static/media/female1.85a02bd8.png\";","export default __webpack_public_path__ + \"static/media/female2.71b2d9ae.png\";","export default __webpack_public_path__ + \"static/media/female3.c5486fee.png\";","export default __webpack_public_path__ + \"static/media/female4.4b6a858f.png\";","/*\r\n    * TYPE\r\n        Fragment of src/components/Threads.tsx- A fragment is a piece of component that is\r\n            part of a scene\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport React from 'react';\r\nimport { Creator, TDescription } from '../stateAPI/interface';\r\nimport CalculateAgo from '../functions/calc-ago';\r\nimport './styles/threads.css';\r\n\r\nimport male1 from '../assets/male1.png';\r\nimport male2 from '../assets/male2.png';\r\nimport male3 from '../assets/male3.png';\r\nimport male4 from '../assets/male4.png';\r\nimport female1 from '../assets/female1.png';\r\nimport female2 from '../assets/female2.png';\r\nimport female3 from '../assets/female3.png';\r\nimport female4 from '../assets/female4.png';\r\n\r\n\r\nconst images = [\r\n    male1, male2, male3, male4, female1, female2, female3, female4\r\n];\r\n\r\ninterface propsReceive {\r\n    creator :Creator;\r\n    thread  :TDescription;\r\n}\r\n\r\nexport default function ThreadHeading(props :propsReceive) {\r\n\r\n    return (\r\n    <div>\r\n        <div className=\"thread-heading\">\r\n            <img src={images[props.creator.avatar]} width=\"50\" height=\"50\" alt=\"avatar icon\" />\r\n            <div className=\"creatorContainer\">\r\n                <div className=\"creator\">\r\n                    <div className=\"creator-name\">{props.creator.username}</div>\r\n                    <div className=\"thread-date\"> { CalculateAgo(props.thread.date) } </div>\r\n                </div>\r\n                <div className=\"thread-title\">{props.thread.title}</div>\r\n            </div>   \r\n        </div>\r\n        <div className=\"thread-description\">{props.thread.text}</div>\r\n    </div>\r\n    )\r\n}","/*\r\n*/\r\nimport Access from \"./api-access-point\";\r\n\r\nexport default async function loadThreadsFromServer(password :string | undefined) :Promise<any>{\r\n    if(password === undefined)\r\n        return { err: 'password was not defined' };\r\n        \r\n    const response = await fetch( Access.getallthreads, {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password: password })\r\n    });\r\n    const json = await response.json();\r\n    if(!json) throw new Error();\r\n    if(json.err) throw new Error(json.err);\r\n    return json;\r\n}\r\n","/*\r\n    * TYPE\r\n        Fragment of src/components/Threads.tsx- A fragment is a piece of component that is\r\n            part of a scene\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport React from 'react';\r\nimport './styles/replies.css';\r\nimport './styles/threads.css';\r\nimport { TReplies } from '../stateAPI/interface';\r\nimport CalculateAgo from '../functions/calc-ago';\r\n\r\nimport male1 from '../assets/male1.png';\r\nimport male2 from '../assets/male2.png';\r\nimport male3 from '../assets/male3.png';\r\nimport male4 from '../assets/male4.png';\r\nimport female1 from '../assets/female1.png';\r\nimport female2 from '../assets/female2.png';\r\nimport female3 from '../assets/female3.png';\r\nimport female4 from '../assets/female4.png';\r\n\r\nimport { contextProvider, StateAPI } from '../stateAPI/state';\r\nimport { setThreads } from '../stateAPI/actions';\r\n\r\nimport loadThreadsFromServer from '../functions/loadThreadsFromServer';\r\nimport Access from '../functions/api-access-point';\r\n\r\nconst images = [\r\n    male1, male2, male3, male4, female1, female2, female3, female4\r\n];\r\n\r\ninterface propsReceive {\r\n    replies :Array<TReplies> | undefined;\r\n    threadid :string | undefined;\r\n}\r\n\r\nexport default function Replies(props :propsReceive)  {\r\n    const { state, dispatch } :StateAPI = React.useContext(contextProvider);\r\n    if(props.replies === undefined) return <div>empty</div>\r\n\r\n    const deleteAReply = async (e :any, commentid :any, usertoken :any) => {\r\n        e.stopPropagation();\r\n        try {\r\n            const response = await fetch(Access.deleteAcomment, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    _token: usertoken,\r\n                    threadid: props.threadid,\r\n                    commentid: commentid })\r\n            });\r\n            const resjson = await response.json();\r\n            if(resjson.err) throw new Error(resjson.err);\r\n\r\n            const result = await loadThreadsFromServer(state.password);\r\n            dispatch( setThreads(result) );\r\n        }\r\n        catch(err) {\r\n            alert('Cannot delete a reply\\n' + err);\r\n        }\r\n    }\r\n\r\n    const blockAUser = async (e :any, userid :any) => {\r\n        e.stopPropagation();\r\n        try {\r\n            const response = await fetch(Access.banuser, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, _id: userid })\r\n            });\r\n            const json = await response.json();\r\n            if(json.message) alert('The user was unbannded!');\r\n            else alert('The user was banned');\r\n        }\r\n        catch(err) {\r\n            alert('Cant ban a user.\\n' + err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.replies.map((reply :TReplies, index :number) => {\r\n                return (\r\n                    <div key={index} style={{\r\n                        width: '90%',\r\n                        marginLeft: '5%',\r\n                        marginTop: '1rem',\r\n                        border: '1px solid gray',\r\n                        borderRadius: '12px',\r\n                        padding: '8px',\r\n                    }}>\r\n                    <div className=\"thread-heading\">\r\n                        <img src={images[reply.avatar]} width=\"50\" height=\"50\" alt=\"avatar icon\" />\r\n                        <div className=\"creatorContainer\">\r\n                            <div className=\"creator\">\r\n                                <div className=\"creator-name\">{reply.username}</div>\r\n                                <div className=\"thread-date\"> { CalculateAgo(reply.time) } </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                    <div className=\"thread-description\">{reply.text}</div>\r\n                    <div className=\"thread-options-container\">\r\n                        <div onClick={ e => deleteAReply(e, reply._id, reply._token)}>... Delete ... </div>\r\n                        <div onClick={ e => blockAUser(e, reply.userid )}>... Block ...  </div>\r\n                    </div>\r\n                    </div>\r\n                )})\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","/*\r\n    * TYPE\r\n        Fragment of src/App.tsx- A fragment is a piece of component that is\r\n            part of a scene\r\n\r\n    * DESCRIPTION\r\n        \r\n*/\r\nimport React from 'react';\r\nimport './styles/threads.css';\r\n\r\nimport { contextProvider, StateAPI } from '../stateAPI/state';\r\nimport { Thread } from '../stateAPI/interface';\r\nimport { setThreads } from '../stateAPI/actions';\r\n\r\nimport Access from '../functions/api-access-point';\r\nimport ThreadHeading from './ThreadHeading';\r\nimport Replies from './Replies';\r\n\r\nimport loadThreadsFromServer from '../functions/loadThreadsFromServer';\r\n\r\nexport default function Threads() {\r\n    const { state } :StateAPI = React.useContext(contextProvider);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                state.threads ?\r\n                state.threads.map((item :Thread, index :number) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <ThreadItem athread={item} />\r\n                        </div>\r\n                    )\r\n                })\r\n                :\r\n                <div className=\"loading\"> ... Loading threads or threads are just empty ... </div>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\ninterface threadItemInterface {\r\n    athread :Thread;\r\n}\r\nfunction ThreadItem({ athread } :threadItemInterface) {\r\n    const { state, dispatch} :StateAPI = React.useContext(contextProvider);\r\n    const [isOpen, setOpen] = React.useState(false);\r\n\r\n    const handleThreadClick = (e :any) => {\r\n        e.stopPropagation();\r\n        setOpen( !isOpen );\r\n    }\r\n\r\n    const handleDeleteThread = async (e :any) => {\r\n        e.stopPropagation();\r\n        try {\r\n            const response = fetch(Access.deleteAthred, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, threadid: athread._id })\r\n            });\r\n            const resjson = await (await response).json();\r\n            if(resjson.err) throw new Error(resjson.err);\r\n            const newThreads = await loadThreadsFromServer(state.password);\r\n            dispatch( setThreads(newThreads) )\r\n        }\r\n        catch(err) {\r\n            alert('Cant delete.\\n' + err);\r\n        }\r\n    }\r\n    \r\n    const banUser = async (e :any) => {\r\n        e.stopPropagation();\r\n        try {\r\n            const response = await fetch(Access.banuser, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: state.password, _id: athread.creator.uid })\r\n            });\r\n            const json = await response.json();\r\n            if(json.message) alert('The user was unbannded!');\r\n            if(json.err) throw new Error(json.err);\r\n            else alert('The user was banned');\r\n        }\r\n        catch(err) {\r\n            alert('Cant ban a user.\\n' + err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"threaditem\">\r\n            <ThreadHeading\r\n                creator={ athread.creator }\r\n                thread={athread.thread}\r\n            />\r\n            \r\n            <div className=\"thread-options-container\">\r\n                <div onClick={handleDeleteThread}>Delete</div>\r\n                {\r\n                    isOpen ?\r\n                        <div onClick={handleThreadClick}>{'>>Close<<'}</div>\r\n                    :\r\n                        <div onClick={handleThreadClick}>Open</div>\r\n                }\r\n                <div onClick={banUser}>Block</div>\r\n            </div>\r\n\r\n            {\r\n                isOpen && <Replies replies={athread.replies} threadid={athread._id} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","/*\n    The main app. The app has only one screen so other are just components (a fragment)\n    of the main app.\n*/\nimport React from 'react';\nimport './App.css';\n\n//set up the api context\nimport { contextProvider, createDefaultState } from './stateAPI/state';\nimport RootReducer from './stateAPI/reducer';\nimport { setThreads } from './stateAPI/actions';\n\nimport Header from    './components/Header';\nimport Threads from   './components/Threads';\nimport loadThreadsFromServer from './functions/loadThreadsFromServer';\n\nfunction App() {\n    const [state, dispatch] = React.useReducer(RootReducer, createDefaultState());\n\n    const load = async (e :any) => {\n      if(e) e.stopPropagation();\n      try {\n        const result = await loadThreadsFromServer(state.password);\n        dispatch( setThreads(result) );\n      }\n      catch(err) {\n        alert('Failed to load threads from the server. ' + err );\n      }\n    }\n\n    return (\n      <contextProvider.Provider value={{state, dispatch}} >\n        <Header />\n        <Threads />\n        <div id=\"refresh\" onClick={load}> Refresh </div>\n      </contextProvider.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}